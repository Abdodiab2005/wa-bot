// commands/antiSpam.js
const logger = require("../../utils/logger");

// ╪е╪╣╪п╪з╪п╪з╪к ┘К┘Е┘Г┘Ж ╪к╪╣╪п┘К┘Д┘З╪з
const SPAM_MESSAGE_COUNT = 3; // ╪╣╪п╪п ╪з┘Д╪▒╪│╪з╪ж┘Д ╪з┘Д┘Е╪к╪╖╪з╪и┘В╪й ┘Д╪к╪╣╪к╪и╪▒ ╪│╪и╪з┘Е
const SPAM_TIME_WINDOW_SECONDS = 8; // ╪о┘Д╪з┘Д ┘Г┘Е ╪л╪з┘Ж┘К╪й
const SPAM_WARN_LIMIT = 2; // ╪╣╪п╪п ╪к╪н╪░┘К╪▒╪з╪к ╪з┘Д╪│╪и╪з┘Е ┘В╪и┘Д ╪з┘Д╪╖╪▒╪п

// ╪░╪з┘Г╪▒╪й ┘Е╪д┘В╪к╪й ┘Д╪к╪о╪▓┘К┘Ж ╪▒╪│╪з╪ж┘Д ╪з┘Д┘Е╪│╪к╪о╪п┘Е┘К┘Ж ┘И╪к╪н╪░┘К╪▒╪з╪к┘З┘Е
const antiSpamCache = new Map();

/**
 * ╪п╪з┘Д╪й ┘Д┘Е╪╣╪з┘Д╪м╪й ╪з┘Д╪▒╪│╪з╪ж┘Д ┘И╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ╪з┘Д╪к┘Г╪▒╪з╪▒ (╪з┘Д╪│╪и╪з┘Е)
 * @param {import('@whiskeysockets/baileys').WASocket} sock - The socket connection
 * @param {import('@whiskeysockets/baileys').WAMessage} msg - The message object
 */
async function handleAntiSpam(sock, msg) {
  const isGroup = msg.key.remoteJid.endsWith("@g.us");
  if (!isGroup) return; // ╪з┘Д┘Ж╪╕╪з┘Е ┘К╪╣┘Е┘Д ┘Б┘В╪╖ ┘Б┘К ╪з┘Д┘Е╪м┘Е┘И╪╣╪з╪к

  const senderId = msg.key.participant || msg.key.remoteJid;
  const groupId = msg.key.remoteJid;

  try {
    // ┘Д╪з ┘Ж╪╖╪и┘В ╪з┘Д┘Ж╪╕╪з┘Е ╪╣┘Д┘Й ╪з┘Д┘Е╪┤╪▒┘Б┘К┘Ж ┘Д╪к╪м┘Ж╪и ╪╖╪▒╪п┘З┘Е ╪и╪з┘Д╪о╪╖╪г
    const groupMetadata = await sock.groupMetadata(groupId);
    const senderIsAdmin = groupMetadata.participants.find(
      (p) => p.id === senderId
    )?.admin;
    if (senderIsAdmin === "admin" || senderIsAdmin === "superadmin") {
      return;
    }

    const messageContent = JSON.stringify(msg.message); // ╪╖╪▒┘К┘В╪й ╪п┘В┘К┘В╪й ┘Д┘Е┘В╪з╪▒┘Ж╪й ┘Е╪н╪к┘И┘Й ╪з┘Д╪▒╪│╪з┘Д╪й
    const now = Math.floor(Date.now() / 1000);
    const cacheKey = `${senderId}_${groupId}`;

    if (!antiSpamCache.has(cacheKey)) {
      antiSpamCache.set(cacheKey, { messages: [], warnCount: 0 });
    }
    const userData = antiSpamCache.get(cacheKey);

    // 1. ┘Б┘Д╪к╪▒╪й ╪з┘Д╪▒╪│╪з╪ж┘Д ╪з┘Д┘В╪п┘К┘Е╪й
    userData.messages = userData.messages.filter(
      (m) => now - m.timestamp < SPAM_TIME_WINDOW_SECONDS
    );

    // 2. ╪е╪╢╪з┘Б╪й ╪з┘Д╪▒╪│╪з┘Д╪й ╪з┘Д╪м╪п┘К╪п╪й
    userData.messages.push({ content: messageContent, timestamp: now });

    // 3. ╪з┘Д╪к╪н┘В┘В ┘Е┘Ж ┘И╪м┘И╪п ╪к┘Г╪▒╪з╪▒
    const repeatedMessages = userData.messages.filter(
      (m) => m.content === messageContent
    );

    if (repeatedMessages.length >= SPAM_MESSAGE_COUNT) {
      userData.warnCount += 1;
      userData.messages = []; // ┘Е╪│╪н ╪з┘Д╪▒╪│╪з╪ж┘Д ╪и╪╣╪п ╪з┘Г╪к╪┤╪з┘Б ╪з┘Д╪│╪и╪з┘Е ┘Д┘Е┘Ж╪╣ ╪з┘Д╪к╪н╪░┘К╪▒╪з╪к ╪з┘Д┘Е╪к╪к╪з┘Д┘К╪й

      if (userData.warnCount >= SPAM_WARN_LIMIT) {
        logger.info(
          `[AntiSpam] Kicking ${senderId} from ${groupId} for repeated spam.`
        );
        // ╪е╪╣╪з╪п╪й ╪к╪╣┘К┘К┘Ж ╪з┘Д╪╣╪п╪з╪п ╪и╪╣╪п ╪з┘Д╪╖╪▒╪п
        antiSpamCache.delete(cacheKey);

        await sock.sendMessage(groupId, {
          text: `ЁЯЪл ╪к┘Е ╪╖╪▒╪п ╪з┘Д┘Е╪│╪к╪о╪п┘Е @${
            senderId.split("@")[0]
          } ╪к┘Д┘В╪з╪ж┘К┘Л╪з ╪и╪│╪и╪и ╪з┘Д╪е╪▓╪╣╪з╪м.`,
          mentions: [senderId],
        });
        await sock.groupParticipantsUpdate(groupId, [senderId], "remove");
      } else {
        logger.info(
          `[AntiSpam] Warning ${senderId} in ${groupId}. Warn count: ${userData.warnCount}`
        );
        await sock.sendMessage(groupId, {
          text: `тЪая╕П ╪к╪н╪░┘К╪▒ ┘Д┘Д┘Е╪│╪к╪о╪п┘Е @${
            senderId.split("@")[0]
          } ╪и╪│╪и╪и ╪к┘Г╪▒╪з╪▒ ╪з┘Д╪▒╪│╪з╪ж┘Д.\n╪з┘Д╪к╪н╪░┘К╪▒ ╪▒┘В┘Е: ${userData.warnCount}`,
          mentions: [senderId],
        });
      }
    }
  } catch (error) {
    logger.error({ err: error }, "Error in handleAntiSpam");
  }
}

module.exports = { handleAntiSpam };
